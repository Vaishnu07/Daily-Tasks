USING UPSTASH PRODUCER CODE 

import json
from kafka import KafkaProducer

def lambda_handler(event, context):
    # Upstash Kafka configuration
    upstash_bootstrap_servers = 'unified-cockatoo-8233-eu1-kafka.upstash.io:9092'
    upstash_username = 'dW5pZmllZC1jb2NrYXRvby04MjMzJD7PSBslPbwmPD-_Sxv2EUZZhI5dF6VkhoI'
    upstash_password = 'YzU3YjcwZTYtY2U2OS00YTQ5LWI5YjEtODRiNjY1MGM2MGY0'
    
    # Kafka Producer configuration
    producer_config = {
        'bootstrap_servers': upstash_bootstrap_servers,
        'sasl_mechanism': 'SCRAM-SHA-256',
        'security_protocol': 'SASL_SSL',
        'sasl_plain_username': upstash_username,
        'sasl_plain_password': upstash_password,
    }

    # Create a Kafka Producer
    producer = KafkaProducer(
        bootstrap_servers=producer_config['bootstrap_servers'],
        sasl_mechanism=producer_config['sasl_mechanism'],
        security_protocol=producer_config['security_protocol'],
        sasl_plain_username=producer_config['sasl_plain_username'],
        sasl_plain_password=producer_config['sasl_plain_password'],
    )

    try:
        # Extract event type from the request
        request_body = json.loads(event['body'])
        print(request_body)
        event_type = request_body['event_type']
        print(event_type)
        

        # Process event based on its type
        if event_type == 'user_registration':
            process_user_registration_event(request_body, producer)
        elif event_type == 'order_placed':
            process_order_placed_event(request_body, producer)
        elif event_type == 'payment_received':
            process_payment_received_event(request_body, producer)
        else:
            handle_unknown_event_type(request_body, producer)

        return {
            'statusCode': 200,
            'body': json.dumps('Processing complete')
        }
    except Exception as e:
        print(f"Error: {e}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }
    finally:
        producer.close()

def process_user_registration_event(request_body, producer):
    # Processing logic for user registration event
    datas = [
        {"event_type": request_body['event_type']},
        {"user_id": request_body['user_id']},
        {"name": request_body['name']},
        {"email": request_body['email']},
        {"city": request_body['city']}
        ]
    # Produce the message to the Kafka topic
    producer.send('Athiva', json.dumps(datas).encode('utf-8'))

def process_order_placed_event(request_body, producer):
    # Processing logic for order placed event
    datas = [
        {"event_type": request_body['event_type']},
        {"order_id": request_body['order_id']},
        {"customer_id": request_body['customer_id']},
        {"total_amount": request_body['total_amount']}
        ]
    # Produce the message to the Kafka topic
    # for i in datas:
        
    producer.send('Athiva', json.dumps(datas).encode('utf-8'))

def process_payment_received_event(request_body, producer):
    # Processing logic for payment received event
    print("Processing payment received event:", event)
    # Produce the message to the Kafka topic
    producer.send('Athiva', json.dumps(event).encode('utf-8'))

def handle_unknown_event_type(request_body, producer):
    # Handling logic for unknown event types
    print("Unknown event type:", event)
    # Produce the message to the Kafka topic
    producer.send('Athiva', json.dumps(event).encode('utf-8'))




CONSUMER CODE FOR LAMBDA 


import json
from confluent_kafka import Consumer, KafkaException
import boto3

def lambda_handler(event, context):
    # Define the S3 bucket name
    s3_bucket_name = 'vaishnu-files'

    # Upstash Kafka configuration
    upstash_bootstrap_servers = 'unified-cockatoo-8233-eu1-kafka.upstash.io:9092'
    upstash_username = 'dW5pZmllZC1jb2NrYXRvby04MjMzJD7PSBslPbwmPD-_Sxv2EUZZhI5dF6VkhoI'
    upstash_password = 'YzU3YjcwZTYtY2U2OS00YTQ5LWI5YjEtODRiNjY1MGM2MGY0'

    # Kafka Consumer configuration
    consumer_config = {
        'bootstrap.servers': upstash_bootstrap_servers,
        'group.id': 'my-group',
        'sasl.mechanisms': 'SCRAM-SHA-256',
        'security.protocol': 'SASL_SSL',
        'sasl.username': upstash_username,
        'sasl.password': upstash_password,
        'auto.offset.reset': 'earliest'
    }

    # Create a Kafka Consumer
    consumer = Consumer(consumer_config)

    # Subscribe to the Kafka topic
    consume = consumer.subscribe(['Athiva'])
    print(consume)

    # Create an S3 client
    s3_client = boto3.client('s3')

    # Consume messages from Kafka
    for _ in range(5):
      
        msg = consumer.poll(timeout=3.0)
        print(msg)
        if msg is None:
            continue
        if msg.error():
            print("Consumer error: {}".format(msg.error()))
            continue

        # Decode the message
        message = msg.value().decode('utf-8')
        print("Received message:", message)

        # Parse the JSON message
        try:
            payload = json.loads(message)
            event_type = payload[0]['event_type']

            if event_type is None:
                print("Event type is missing in the payload. Skipping...")
                continue

            # Define the S3 prefix based on the event type
            if event_type == 'order_placed':
                s3_path = 'Kafka consume/order_placed/'+ payload[1]['order_id'] + '.json'
            elif event_type == 'user_registration':
                s3_path = 'Kafka consume/user_registration/'+ payload[1]['user_id'] + '.json'
            else:
                print("Invalid event type. Skipping...")
                continue

            # Define the S3 path based on the event type and order ID
            # s3_path = s3_prefix + payload[1]['order_id'] + '.json'

            # Write the message to S3
            try:
                s3_client.put_object(Key=s3_path, Bucket=s3_bucket_name, Body=message.encode('utf-8'))
                print("Message written to S3:", s3_path)
            except Exception as e:
                print("Error writing message to S3:", e)
        except json.JSONDecodeError as e:
            print("Error decoding message:", e)
            continue

    # Close the Kafka consumer
    consumer.close()


